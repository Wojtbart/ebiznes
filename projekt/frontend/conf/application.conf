# https://www.playframework.com/documentation/latest/Configuration

# wlaczamy CORS po stronie serwera
play.filters.enabled += "play.filters.cors.CORSFilter"
# play.filters.enabled += "play.filters.https.RedirectHttpsFilter"
play.filters.cors.allowedOrigins = ["http://localhost:3000", "https://localhost:3000","https://shopershopy.azurewebsites.net","http://shopershopy.azurewebsites.net"]
play.crypto.secret="eloelo321"
  play.server.https.keyStore.path = "client.jks"
  play.server.https.keyStore.type = "JKS"
  play.server.https.keyStore.password = "U9PgfeedNu"

https = {
  engineProvider = "play.core.server.ssl.DefaultSSLEngineProvider"
  engineProvider = ${?play.http.sslengineprovider}

  

  # HTTPS keystore configuration, used by the default SSL engine provider
  # HTTPS keystore configuration, used by the default SSL engine provider
      keyStore = {
        # The path to the keystore
        path = "./client.jks"

        # The type of the keystore
        type = "JKS"
        type = ${?https.keyStoreType}

        # The password for the keystore
        password = "U9PgfeedNu"
        password = ${?https.keyStorePassword}

        # The algorithm to use. If not set, uses the platform default algorithm.
        algorithm = ${?https.keyStoreAlgorithm}
      }

  # HTTPS truststore configuration
  trustStore = {
    # If true, does not do CA verification on client side certificates
    noCaVerification = false
  }

    # Whether JSSE want client auth mode should be used. This means, the server
    # will request a client certificate, but won't fail if one isn't provided.
    wantClientAuth = false

    # Whether JSSE need client auth mode should be used. This means, the server
    # will request a client certificate, and will fail and terminate the session
    # if one isn't provided.
    needClientAuth = false
}

play.ws = {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl-config = {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    trustManager = {
      stores = [
        { path = "exampletrust.jks" }
      ]
    }
    keyManager = {
      stores = [
        { type = "JKS", path = "client.jks", password = "U9PgfeedNu" }
      ]
    }
  }
}


play.filters.hosts {
  allowed = ["."]
}

github = {
  clientId = "4d9f61f8f530cde9c3d9"
  clientSecret = "0c904630bc66c0913a2c5a8237cbaeeedb7ba69d"
  redirectUri = "https://shopershopy-backend.azurewebsites.net/github/callback"
}

google = {
  clientId = "844621891117-8d6t2seghpjj0h4ur29m8mtf26cbo6eu.apps.googleusercontent.com"
  clientSecret = "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"
  redirectUri = "https://the-shop-backend.azurewebsites.net/google/callback"
}

facebook = {
  clientId = "773917300296658"
  clientSecret = "5d8c1910fe8077c9262d964885e31aec"
  redirectUri = "https://the-shop-backend.azurewebsites.net/facebook/callback"
  # redirectUri = "https://5cd1-89-64-34-0.eu.ngrok.io"
}

linkedin = {
  clientId = "78ewk0ly50reuq"
  clientSecret = "HttW5ESWhtXSIFUw"
  redirectUri = "http://localhost:9000/linkedin/callback" 
}

stripe = {
  clientSecret = "sk_test_51LJbvHE19vO0UQxEZHkN4kZTsSsiFvQQqYweKZsREOwNqUdsyT2SW7j8E4tzZxu9osdX4M9hmnzdhzgeie9fLwGO00VVL0CTlv" 
}

api.uri = "https://shopershopy.azurewebsites.net/"
play.http.secret.key="hellogsgfdgsdfgsegse"

